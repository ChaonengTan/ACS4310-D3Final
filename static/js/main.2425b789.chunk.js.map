{"version":3,"sources":["gameInfo.csv","components/pieGraph/pieGraph.js","components/barGraph/barGraph.js","App.js","reportWebVitals.js","index.js"],"names":["PieGraph","props","myRef","React","createRef","state","data","filterExists","this","width","height","colorScale","d3","domain","length","interpolator","arcGen","innerRadius","outerRadius","padAngle","countAllProperty","category","reducer","parseNum","e","undefined","parseInt","split","join","countedData","reduce","acc","obj","newParsedData","Object","entries","key","value","push","svg","current","append","attr","style","graphSpacing","graphSize","filters","then","forEach","i","includes","pieGroup","pieGen","countedProperties","pieData","map","d","pieLabels","selectAll","enter","pieLabelArc","text","label","centroid","setState","ref","Component","BarGraph","margin","xscale","range","xscalelabels","yscale","linegen","x","y0","y1","curve","bottomAxis","tickFormat","_","ticks","leftAxis","call","App","useState","gameInfo","CSV","setCSV","setFilters","setCategory","setReducer","firstUpdate","useRef","useLayoutEffect","setNewGraph","setWidth","setHeight","setGraphSpacing","setGraphSize","setMargin","graphType","setGraphType","graph","setGraph","saveAsName","setSaveAsName","className","onChange","target","for","id","type","placeholder","URL","createObjectURL","files","onClick","fileName","htmlToImage","document","getElementById","dataUrl","saveAs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2425b789.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gameInfo.a28dd38d.csv\";","import React from \"react\"\nimport * as d3 from 'd3'\n\nexport default class PieGraph extends React.Component {\n    constructor(props){\n        super(props)\n        this.myRef = React.createRef()\n        this.state = {data:[]}\n        this.filterExists = []\n    }\n    \n    componentDidMount(){\n        // consts\n        const { data, width, height } = this.props\n        // helpers\n        this.colorScale = d3.scaleSequential()\n            .domain([0, data.length])\n            .interpolator(d3.interpolateRainbow)\n        this.arcGen = (innerRadius, outerRadius) => {\n            return(\n                d3.arc()\n                    .innerRadius(innerRadius)\n                    .outerRadius(outerRadius)\n                    .padAngle(0.01)\n            )\n        }\n        this.countAllProperty = (data, category, reducer) => {\n            const parseNum = e => e === undefined ? 0 : parseInt(e.split(',').join(''))\n            const countedData = data.reduce((acc, obj) => {\n                acc[obj[category]] === undefined ? acc[obj[category]] = parseNum(obj[reducer]) : acc[obj[category]] += parseNum(obj[reducer])\n                return acc\n            }, [])\n            let newParsedData = []\n            for (const [key, value] of Object.entries(countedData)) {\n                newParsedData.push({'label':key, 'value':value})\n            }\n            return newParsedData\n        }\n        this.svg = d3.select(this.myRef.current)\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .style('border', '1px black solid')\n    }\n    componentDidUpdate(){\n        // consts\n        const { data, width, height, graphSpacing, graphSize, filters } = this.props\n        // renderer\n        d3.csv(data).then(data => {\n            filters.forEach((e, i) => {\n                if(this.filterExists.includes(e)) { return }\n                this.filterExists.push(e)\n                // consts\n                const pieGroup = this.svg\n                    .append('g')\n                    .attr('transform', `translate(${width / 2}, ${height / 2})`)\n                const pieGen = d3.pie()\n                const countedProperties = this.countAllProperty(data, e.category, e.reducer)\n                const pieData = pieGen(countedProperties.map(d => d.value))\n                // pie chart\n                const piepath = pieGroup\n                    .selectAll('path')\n                    .data(pieData)\n                    .enter()\n                    .append('path')\n                    .attr('d', this.arcGen(parseInt(graphSpacing) + parseInt(graphSize)*i, parseInt(graphSize)*(i+1)))\n                    .attr('fill', (d, i) => this.colorScale(i))\n                // pieLabel\n                const pieLabels = this.svg\n                    .append('g')\n                    .attr('transform', `translate(${width / 2}, ${height / 2})`)\n                const pieLabelArc = this.arcGen(parseInt(graphSpacing) + parseInt(graphSize)*i, parseInt(graphSize)*(i+1))\n                pieLabels\n                    .selectAll('text')\n                    .data(countedProperties)\n                    .enter()\n                    .append('text')\n                    .text(d => d.label)\n                    .attr(\"transform\", (d, i) => `translate(${pieLabelArc.centroid(pieData[i])})`)\n                    .attr('text-anchor', 'middle')\n            })\n\n            // updater\n            this.setState({data})\n        })\n    }\n    render(){\n        return(\n            <div ref={this.myRef}></div>\n        )\n    }\n}","import React from \"react\"\nimport * as d3 from 'd3'\n\nexport default class BarGraph extends React.Component {\n    constructor(props){\n        super(props)\n        this.myRef = React.createRef()\n        this.state = {data:[]}\n        this.filterExists = []\n    }\n    \n    componentDidMount(){\n        // consts\n        const { data, width, height } = this.props\n        // helpers\n        this.countAllProperty = (data, category, reducer) => {\n            const parseNum = e => e === undefined ? 0 : parseInt(e.split(',').join(''))\n            const countedData = data.reduce((acc, obj) => {\n                acc[obj[category]] === undefined ? acc[obj[category]] = parseNum(obj[reducer]) : acc[obj[category]] += parseNum(obj[reducer])\n                return acc\n            }, [])\n            let newParsedData = []\n            for (const [key, value] of Object.entries(countedData)) {\n                newParsedData.push({'label':key, 'value':value})\n            }\n            return newParsedData\n        }\n        this.svg = d3.select(this.myRef.current)\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .style('border', '1px black solid')\n    }\n    componentDidUpdate(){\n        // consts\n        const { data, width, height, filters, margin } = this.props\n        // renderer\n        d3.csv(data).then(data => {\n            filters.forEach((e, i) => {\n                if(this.filterExists.includes(e)) { return }\n                this.filterExists.push(e)\n\n                // consts\n                const [category, reducer] = [e.category, e.reducer]\n                const countedData = this.countAllProperty(data, category, reducer)\n                // scales\n                const xscale = d3.scaleLinear()\n                    .domain([0, countedData.length - 1])\n                    .range([margin, width - margin])\n                const xscalelabels = countedData.map(obj => obj.label)\n                this.colorScale = d3.scaleSequential()\n                    .domain([0, xscalelabels.length])\n                    .interpolator(d3.interpolateRainbow)\n                const yscale = d3.scaleLinear()\n                    .domain(d3.extent(countedData, d => d.value))\n                    .range([height - margin, margin])\n                // helper\n                const linegen = d3.area()\n                    .x((d, i) => xscale(i))\n                    .y0(d => yscale(d.value))\n                    .y1(height - margin)\n                    .curve(d3.curveStep)\n                // graph\n                this.svg\n                    .append('path')\n                    .attr('d', linegen(countedData))\n                    .attr('stroke-width', 1)\n                    .attr('stroke', 'none')\n                    .attr('fill', (d, i) => this.colorScale(i))\n                    .style('opacity', '.3')\n                // axis\n                const bottomAxis = d3.axisBottom(xscale)\n                    .tickFormat((_, i) => xscalelabels[i])\n                    .ticks(xscalelabels.length)\n                const leftAxis = d3.axisLeft(yscale)\n                this.svg\n                    .append('g')\n                    .attr('transform', `translate(0, ${height - margin})`)\n                    .call(bottomAxis)\n                        .selectAll(\"text\")  \n                        .style(\"text-anchor\", \"end\")\n                        .attr(\"dx\", \"-.8em\")\n                        .attr(\"dy\", \".15em\")\n                        .attr(\"transform\", \"rotate(-50)\");\n                this.svg\n                    .append('g')\n                    .attr('transform', `translate(${margin}, 0)`)\n                    .call(leftAxis)\n                \n            })\n            // updater\n            this.setState({data})\n        })\n    }\n    render(){\n        return(\n            <div ref={this.myRef}></div>\n        )\n    }\n}","import './App.css';\nimport { useState, useRef, useLayoutEffect } from 'react';\nimport gameInfo from './gameInfo.csv'\nimport * as htmlToImage from 'html-to-image'\nimport { saveAs } from 'file-saver'\n// importGraphs\nimport PieGraph from './components/pieGraph/pieGraph'\nimport BarGraph from './components/barGraph/barGraph'\n\nfunction App() {\n  // CSV\n  const [CSV, setCSV] = useState(gameInfo)\n  // filterData\n  const [filters, setFilters] = useState([]);\n  const addNewFilter = data => setFilters([...filters, data])\n  const [category, setCategory] = useState(null)\n  const [reducer, setReducer] = useState(null)\n  // filter-graph updater: detects wether filters updates => updates the graph\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return\n    }\n    setNewGraph()\n  }, [filters])\n  // initializationData\n  const [width, setWidth] = useState('600')\n  const [height, setHeight] = useState('600')\n  const [graphSpacing, setGraphSpacing] = useState('10')\n  const [graphSize, setGraphSize] = useState('100')\n  const [margin, setMargin] = useState(100)\n  // graphData\n  const [graphType, setGraphType] = useState('PieGraph')\n  const [graph, setGraph] = useState(null)\n  const setNewGraph = () => {\n    const graphStorage = () => {\n      if(graphType == 'PieGraph'){\n        return (\n          <PieGraph\n            data={CSV}\n            width={width}\n            height={height}\n            graphSpacing={graphSpacing}\n            graphSize={graphSize}\n            filters={filters}\n          />\n        )\n      }\n      if(graphType == 'BarGraph'){\n        return (\n          <BarGraph\n            data={CSV}\n            width={width}\n            height={height}\n            filters={filters}\n            margin={margin}\n          />\n        )\n      }\n    }\n    setGraph(graphStorage())\n  }\n  // saveElement\n  const [saveAsName, setSaveAsName] = useState('myFile')\n  const saveElement = (id, fileName) => {\n    htmlToImage.toPng(document.getElementById(id))\n      .then(dataUrl => saveAs(dataUrl,`${fileName}.png`))\n  }\n\n  // return\n  return (\n    <div className=\"App\">\n      <div className='interface'>\n        <h1>Data Renderer</h1>\n        {/* initialization */}\n          <div className='interfaceGroup'>\n            <select value={graphType} onChange={e => setGraphType(e.target.value)}>\n              <option>BarGraph</option>\n              <option>PieGraph</option>\n            </select>\n            {/* canvas dimentions */}\n            <div className='inputGroup'>\n              <label for='widthInput'>Width: \n                <input id='widthInput' type='number' onChange={e => setWidth(e.target.value)} placeholder='width' value={width}></input>\n              </label>\n              <label for='heightInput'>Height: \n                <input id='heightInput' type='number' onChange={e => setHeight(e.target.value)} placeholder='height' value={height}></input>\n              </label>\n            </div>\n            {/* conditional rendering of graph-specific settings */}\n            <div className='additionalSettings'>\n              {graphType=='PieGraph' &&\n              <div className='inputGroup'>\n                <label for='graphSpacingInput'>Graph Spacing:\n                  <input id='graphSpacingInput' type='number' onChange={e => setGraphSpacing(e.target.value)} placeholder='graphSpacing' value={graphSpacing}></input>\n                </label>\n                <label for='graphSizeInput'>Graph Size:\n                  <input id='graphSizeInput' type='number' onChange={e => setGraphSize(e.target.value)} placeholder='graphSize' value={graphSize}></input>\n                </label>\n                \n              </div>\n              }\n              {graphType=='BarGraph' &&\n              <div className='inputGroup'>\n                <label for='marginInput'>Margin: \n                  <input id='marginInput' type='number' onChange={e => setMargin(e.target.value)} placeholder='margin' value={margin}></input>\n                </label>\n              </div>\n              }\n            </div>\n            {/* graph initialization */}\n            <div className='inputGroup'>\n              <label for='csvInput'>Custom CSV: \n                <input id='csvInput' type='file' id='customCSV' onChange={e => setCSV(URL.createObjectURL(e.target.files[0]))}></input>\n              </label>\n            </div>\n            <div className='inputGroup'>\n              <button onClick={() => setFilters([])}>Initialize Graph</button>\n              {graph &&\n              <button onClick={() => setGraph(null)}>clearGraph</button>\n              }\n            </div>\n          </div>\n        {/* generalInterface */}\n        {graph &&\n          <div className='interfaceGroup'>\n            <div className='inputGroup'>\n              <label for='categoryInput'>Category: \n                <input id='categoryInput' type='text' onChange={e => setCategory(e.target.value)} placeholder='category'></input>\n              </label>\n              <label for='reducerInput'>Reducer: \n                <input id='reducerInput' type='text' onChange={e => setReducer(e.target.value)} placeholder='reducer'></input>\n              </label>\n              \n              <button onClick={e => addNewFilter({category:`${category}`, reducer:`${reducer}`})}>Add Filter</button>\n            </div>\n            <div className='inputGroup'>\n              <label for='fileNameInput'>File Name: \n                <input id='fileNameInput' type='text' placeholder='myFile.png' value={saveAsName} onChange={e => setSaveAsName(e.target.value)}></input>\n              </label>\n              <button onClick={() => saveElement('graph', saveAsName)}>Save Image</button>\n            </div>\n          </div>\n        }\n      </div>\n      <div id='graph'>{graph}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}