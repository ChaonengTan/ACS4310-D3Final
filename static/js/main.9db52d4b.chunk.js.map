{"version":3,"sources":["components/graph/graph.js","gameInfo.csv","App.js","reportWebVitals.js","index.js"],"names":["Graph","props","myRef","React","createRef","state","data","filterExists","this","width","height","colorScale","d3","domain","length","interpolator","arcGen","innerRadius","outerRadius","padAngle","countAllProperty","category","reducer","parseNum","e","undefined","parseInt","split","join","countedData","reduce","acc","obj","newParsedData","Object","entries","key","value","push","svg","current","append","attr","style","graphSpacing","graphSize","filters","then","forEach","i","includes","pieGroup","pieGen","countedProperties","pieData","map","d","pieLabels","selectAll","enter","pieLabelArc","text","label","centroid","setState","ref","Component","App","useState","gameInfo","CSV","setCSV","setFilters","setCategory","setReducer","setWidth","setHeight","setGraphSpacing","setGraphSize","graph","setGraph","setNewGraph","className","type","onChange","target","placeholder","id","URL","createObjectURL","files","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9db52d4b.chunk.js","sourcesContent":["import React from \"react\"\nimport * as d3 from 'd3'\n\nexport default class Graph extends React.Component {\n    constructor(props){\n        super(props)\n        this.myRef = React.createRef()\n        this.state = {data:[]}\n        this.filterExists = []\n    }\n    \n    componentDidMount(){\n        // consts\n        const { data, width, height } = this.props\n        // helpers\n        this.colorScale = d3.scaleSequential()\n            .domain([0, data.length])\n            .interpolator(d3.interpolateRainbow)\n        this.arcGen = (innerRadius, outerRadius) => {\n            return(\n                d3.arc()\n                    .innerRadius(innerRadius)\n                    .outerRadius(outerRadius)\n                    .padAngle(0.01)\n            )\n        }\n        this.countAllProperty = (data, category, reducer) => {\n            const parseNum = e => e === undefined ? 0 : parseInt(e.split(',').join(''))\n            const countedData = data.reduce((acc, obj) => {\n                acc[obj[category]] === undefined ? acc[obj[category]] = parseNum(obj[reducer]) : acc[obj[category]] += parseNum(obj[reducer])\n                return acc\n            }, [])\n            let newParsedData = []\n            for (const [key, value] of Object.entries(countedData)) {\n                newParsedData.push({'label':key, 'value':value})\n            }\n            return newParsedData\n        }\n        this.svg = d3.select(this.myRef.current)\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .style('border', '1px black solid')\n    }\n    componentDidUpdate(){\n        // consts\n        const { data, width, height, graphSpacing, graphSize, filters } = this.props\n        // renderer\n        d3.csv(data).then(data => {\n            filters.forEach((e, i) => {\n                if(this.filterExists.includes(e)) { return }\n                this.filterExists.push(e)\n                // consts\n                const pieGroup = this.svg\n                    .append('g')\n                    .attr('transform', `translate(${width / 2}, ${height / 2})`)\n                const pieGen = d3.pie()\n                const countedProperties = this.countAllProperty(data, e.category, e.reducer)\n                const pieData = pieGen(countedProperties.map(d => d.value))\n                // pie chart\n                const piepath = pieGroup\n                    .selectAll('path')\n                    .data(pieData)\n                    .enter()\n                    .append('path')\n                    .attr('d', this.arcGen(parseInt(graphSpacing) + parseInt(graphSize)*i, parseInt(graphSize)*(i+1)))\n                    .attr('fill', (d, i) => this.colorScale(i))\n                // pieLabel\n                const pieLabels = this.svg\n                    .append('g')\n                    .attr('transform', `translate(${width / 2}, ${height / 2})`)\n                const pieLabelArc = this.arcGen(parseInt(graphSpacing) + parseInt(graphSize)*i, parseInt(graphSize)*(i+1))\n                pieLabels\n                    .selectAll('text')\n                    .data(countedProperties)\n                    .enter()\n                    .append('text')\n                    .text(d => d.label)\n                    .attr(\"transform\", (d, i) => `translate(${pieLabelArc.centroid(pieData[i])})`)\n                    .attr('text-anchor', 'middle')\n            })\n\n            // updater\n            this.setState({data})\n        })\n    }\n    render(){\n        return(\n            <div ref={this.myRef}></div>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/gameInfo.a28dd38d.csv\";","import './App.css';\nimport { useState } from 'react';\nimport Graph from './components/graph/graph'\nimport gameInfo from './gameInfo.csv'\n\nfunction App() {\n  // CSV\n  const [CSV, setCSV] = useState(gameInfo)\n  // filterData\n  const [filters, setFilters] = useState([]);\n  const addNewFilter = data => setFilters([...filters, data])\n  const [category, setCategory] = useState(null)\n  const [reducer, setReducer] = useState(null)\n  // initializationData\n  const [width, setWidth] = useState('600')\n  const [height, setHeight] = useState('600')\n  const [graphSpacing, setGraphSpacing] = useState('10')\n  const [graphSize, setGraphSize] = useState('100')\n  // graphData\n  const [graph, setGraph] = useState(null)\n  const setNewGraph = () => {\n    const graphStorage = () => {\n      return (\n        <Graph \n        data={CSV}\n        width={width}\n        height={height}\n        graphSpacing={graphSpacing}\n        graphSize={graphSize}\n        filters={filters}\n      />\n      )\n    }\n    setGraph(graphStorage())\n  }\n\n  // return\n  return (\n    <div className=\"App\">\n      <div className='interface'>\n        {/* initialization */}\n        {!graph &&\n          <div className='initializer'>\n            <div className='graphSize'>\n              <input type='text' onChange={e => setWidth(e.target.value)} placeholder='width' value={width}></input>\n              <input type='text' onChange={e => setHeight(e.target.value)} placeholder='height' value={height}></input>\n            </div>\n            <div className='graphSettings'>\n              <input type='text' onChange={e => setGraphSpacing(e.target.value)} placeholder='graphSpacing' value={graphSpacing}></input>\n              <input type='text' onChange={e => setGraphSize(e.target.value)} placeholder='graphSize' value={graphSize}></input>\n            </div>\n            <input type='file' id='customCSV' onChange={e => setCSV(URL.createObjectURL(e.target.files[0]))}></input>\n            <button onClick={() => setNewGraph()}>Initialize Graph</button>\n          </div>\n        }\n        {/* generalInterface */}\n        {graph &&\n          <div className='addNewFilter'>\n            <input type='text' onChange={e => setCategory(e.target.value)} placeholder='category'></input>\n            <input type='text' onChange={e => setReducer(e.target.value)} placeholder='reducer'></input>\n            <button onClick={e => {\n              addNewFilter({category:`${category}`, reducer:`${reducer}`})\n              setNewGraph()\n            }}>Add Filter</button>\n        </div>\n        }\n      </div>\n      {graph}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}